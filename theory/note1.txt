JAVA (Basic/Fundamental):
------------------------------------------------------------------------
1) Java programs are basically platform independent

2) Compilation Process:
-> A.java ---> source file (source code - high-level language)
-> After compiling the .java file a bytecode is generated
-> bytecode: bytecode is highly optimized set of instructions that are targeted to run for an underlying platform / hardware. bytecode is something that does not know the target platform / it doesn't know where to run
-> .java (compiler / bytecode generator) --> bytecode (Assembly language)
-> .java (high-level language) --> .class (bytecode - Assembly language)
-> Now this bytecode can run / execute (bytecode is the executable version of java programs)
-> All java programs have same end product --> bytecode which is not tied to any platform
-> Now this bytecode is get submitted to the JVM
-> .java --> .class --> JVM

3) JVM (Java Virtual Machine):
-> It's an abstract processor which create a secure and concleaded runtime environment to execute any bytecode
-> But JVM is just a theoratical concept it is not physical
-> Practical / Physical implementation of JVM is called JRE (Java Runtime Environment)

------------------------------------------------------------
java 8: JDK + JRE
java 17: All are merged
------------------------------------------------------------

-> JRE submit the bytecode to interpreter
-> The interpreter execute the bytecode line by line and give the output
-> JRE is completly unaffected by the OS but connected with the OS
-> So, basically JRE makes a protected block in which it act as OS to our java programs

bytecode = PI
JDK + JVM + JRE = PD

win (JDK + JVM + JRE) = Windows
deb (JDK + JVM + JRE) = Linux
ios (JDK + JVM + JRE) = Android

-> All the JVM can runs those bytecode (cz, bytecode is PI)

So, You just write ur java code once and then run it in any platform for multiple times (JAVA is portable for this reason)

The diff between JDK & JRE:
-> JDK = JVM + JRE + All library / executables
-> JRE = JVM + Library only to run the already generated bytecode / .class file